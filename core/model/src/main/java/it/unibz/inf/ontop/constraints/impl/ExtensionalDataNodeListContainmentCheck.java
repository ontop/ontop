package it.unibz.inf.ontop.constraints.impl;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import it.unibz.inf.ontop.constraints.Homomorphism;
import it.unibz.inf.ontop.constraints.HomomorphismFactory;
import it.unibz.inf.ontop.dbschema.ForeignKeyConstraint;
import it.unibz.inf.ontop.dbschema.RelationDefinition;
import it.unibz.inf.ontop.iq.node.ExtensionalDataNode;
import it.unibz.inf.ontop.model.term.Variable;
import it.unibz.inf.ontop.model.term.VariableOrGroundTerm;
import it.unibz.inf.ontop.utils.CoreUtilsFactory;
import it.unibz.inf.ontop.utils.ImmutableCollectors;
import it.unibz.inf.ontop.utils.VariableGenerator;

import java.util.*;
import java.util.stream.Stream;

public class ExtensionalDataNodeListContainmentCheck {

    private final HomomorphismFactory homomorphismFactory;
    private final CoreUtilsFactory coreUtilsFactory;

    public ExtensionalDataNodeListContainmentCheck(HomomorphismFactory homomorphismFactory, CoreUtilsFactory coreUtilsFactory) {
        this.homomorphismFactory = homomorphismFactory;
        this.coreUtilsFactory = coreUtilsFactory;
    }

    public boolean isContainedIn(ImmutableList<? extends VariableOrGroundTerm> answerVariables1, ImmutableList<ExtensionalDataNode> nodes1, ImmutableSet<Variable> nonNullableVariables1, ImmutableList<? extends VariableOrGroundTerm> answerVariables2, ImmutableList<ExtensionalDataNode> nodes2) {
        Homomorphism.Builder builder = homomorphismFactory.getHomomorphismBuilder();
        // get the substitution for the answer variables first
        // this will ensure that all answer variables are mapped either to constants or
        //       to answer variables in the base (but not to the labelled nulls generated by the chase)
        if (answerVariables1.size() != answerVariables2.size())
            return false;

        for (int i = 0; i < answerVariables1.size(); i++)
            builder.extend(answerVariables1.get(i), answerVariables2.get(i));

        if (builder.isValid()) {
            ImmutableSet<ChasedExtensionalDataNode> chase = chase(nodes1, nonNullableVariables1);
            ImmutableSet<RelationDefinition> relationsInChase = chase.stream()
                    .map(ChasedExtensionalDataNode::getRelationDefinition)
                    .collect(ImmutableCollectors.toSet());

            if (nodes2.stream()
                    .map(ExtensionalDataNode::getRelationDefinition)
                    .anyMatch(r -> !relationsInChase.contains(r)))
                return false;

            Iterator<Homomorphism> iterator = new ExtensionalDataNodeHomomorphismIteratorImpl(
                    builder.build(),
                    nodes2,
                    chase);
            return iterator.hasNext();
        }
        return false;
    }


    public ImmutableSet<ChasedExtensionalDataNode> chase(ImmutableList<ExtensionalDataNode> nodes, ImmutableSet<Variable> nonNullableVariables) {
        VariableGenerator variableGenerator = coreUtilsFactory.createVariableGenerator(nodes.stream()
                .flatMap(n -> n.getVariables().stream())
                .collect(ImmutableCollectors.toSet()));

        return nodes.stream()
                .flatMap(node -> chase(node, variableGenerator, nonNullableVariables))
                .collect(ImmutableCollectors.toSet());
    }

    private Stream<ChasedExtensionalDataNode> chase(ExtensionalDataNode node, VariableGenerator variableGenerator, ImmutableSet<Variable> nonNullableVariables) {
        ChasedExtensionalDataNode chasedNode = new ChasedExtensionalDataNode(node, variableGenerator);
        return Stream.concat(Stream.of(chasedNode),
                node.getRelationDefinition().getForeignKeys().stream()
                        .map(fk -> chase(fk, chasedNode, variableGenerator, nonNullableVariables))
                        .flatMap(Optional::stream));
    }

    private Optional<ChasedExtensionalDataNode> chase(ForeignKeyConstraint fk, ChasedExtensionalDataNode node, VariableGenerator variableGenerator, ImmutableSet<Variable> nonNullableVariables) {
        if (fk.getComponents().stream().anyMatch(c -> c.getAttribute().isNullable() && !nonNullableVariables.contains(node.getArgument(c.getAttribute().getIndex() - 1))))
            return Optional.empty();

        ImmutableMap<Integer, VariableOrGroundTerm> referencedArgumentMap = fk.getComponents().stream()
                .collect(ImmutableCollectors.toMap(
                        c ->c.getReferencedAttribute().getIndex() - 1,
                        c -> node.getArgument(c.getAttribute().getIndex() - 1)));

        ChasedExtensionalDataNode chasedNode = new ChasedExtensionalDataNode(fk.getReferencedRelation(), referencedArgumentMap, variableGenerator);
        return Optional.of(chasedNode);
    }

    static class ChasedExtensionalDataNode {
        private final RelationDefinition relationDefinition;
        private final Map<Integer, VariableOrGroundTerm> argumentMap;
        private final VariableGenerator variableGenerator;

        public ChasedExtensionalDataNode(ExtensionalDataNode node, VariableGenerator variableGenerator) {
            this.relationDefinition = node.getRelationDefinition();
            this.argumentMap = new HashMap<>(node.getArgumentMap());
            this.variableGenerator = variableGenerator;
        }

        public ChasedExtensionalDataNode(RelationDefinition relationDefinition, ImmutableMap<Integer, ? extends VariableOrGroundTerm> argumentMap, VariableGenerator variableGenerator) {
            this.relationDefinition = relationDefinition;
            this.argumentMap = new HashMap<>(argumentMap);
            this.variableGenerator = variableGenerator;
        }

        public RelationDefinition getRelationDefinition() {
            return relationDefinition;
        }

        public VariableOrGroundTerm getArgument(int index) {
            return argumentMap.computeIfAbsent(index, i -> variableGenerator.generateNewVariable());
        }

        @Override
        public boolean equals(Object o) {
            if (o instanceof ChasedExtensionalDataNode) {
                ChasedExtensionalDataNode other = (ChasedExtensionalDataNode) o;
                return relationDefinition.equals(other.relationDefinition) && argumentMap.equals(other.argumentMap);
            }
            return false;
        }

        @Override
        public int hashCode() {
            return Objects.hash(relationDefinition, argumentMap);
        }

        @Override
        public String toString() {
            return relationDefinition.getAtomPredicate().getName() + argumentMap;
        }
    }

}
