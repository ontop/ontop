<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>it.unibz.inf.ontop</groupId>
        <artifactId>ontop-protege</artifactId>
        <version>5.2.1-SNAPSHOT</version>
    </parent>

    <artifactId>ontop-protege-plugin</artifactId>
    <description>Ontop OBDA plugin for protégé</description>

    <organization>
        <name>KRDB Research Centre for Knowledge and Data, Free University of Bozen-Bolzano</name> <!-- this is used in generated plugin metadata -->
        <url>http://www.inf.unibz.it/krdb/</url>
    </organization>

    <properties>
        <!-- Dependency versions: overrides of root pom.xml to match protégé required versions -->
        <guava.version>18.0</guava.version>
        <owlapi.version>4.5.24</owlapi.version>

        <!-- Build-related properties -->
        <symbolic.name>it.unibz.inf.ontop.protege</symbolic.name>
        <finalName>${symbolic.name}-${project.version}</finalName>
        <filter.main.resources>true</filter.main.resources>
        <skipTests>true</skipTests> <!-- TODO: re-enable -->
    </properties>

    <profiles>
        <!-- ontop-protege-dependencies only added as dependency if ontop-protege-plugin is going to be generated
             (have to replicate for each profile enabling the plugin, might fix by not requiring the 'shaded' classifier) -->
        <profile>
            <id>plugin</id>
            <dependencies>
                <dependency>
                    <groupId>${project.groupId}</groupId>
                    <artifactId>ontop-protege-dependencies</artifactId>
                    <classifier>shaded</classifier>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <id>asset-plugin</id>
            <dependencies>
                <dependency>
                    <groupId>${project.groupId}</groupId>
                    <artifactId>ontop-protege-dependencies</artifactId>
                    <classifier>shaded</classifier>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <id>asset-protege</id>
            <dependencies>
                <dependency>
                    <groupId>${project.groupId}</groupId>
                    <artifactId>ontop-protege-dependencies</artifactId>
                    <classifier>shaded</classifier>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <id>release</id>
            <dependencies>
                <dependency>
                    <groupId>${project.groupId}</groupId>
                    <artifactId>ontop-protege-dependencies</artifactId>
                    <classifier>shaded</classifier>
                </dependency>
            </dependencies>
        </profile>
    </profiles>

    <dependencies>
        <!-- owlapi used in Protege -->
        <dependency>
            <groupId>net.sourceforge.owlapi</groupId>
            <artifactId>owlapi-osgidistribution</artifactId>
            <version>${owlapi.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.osgi</groupId>
            <artifactId>org.osgi.core</artifactId>
        </dependency>

        <!-- dependencies available from Protege: begin -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <scope>provided</scope>
        </dependency>
        <!-- dependencies available from Protege: end -->

        <dependency>
            <groupId>xerces</groupId>
            <artifactId>xercesImpl</artifactId>
        </dependency>
        <dependency>
            <groupId>xml-apis</groupId>
            <artifactId>xml-apis</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.thrift</groupId>
            <artifactId>libthrift</artifactId>
        </dependency>

        <!-- Protege and OWLAPI bundle dependencies -->
        <dependency>
            <groupId>edu.stanford.protege</groupId>
            <artifactId>protege-editor-core</artifactId>
            <type>bundle</type>
            <scope>provided</scope>
            <exclusions>
                <exclusion>
                    <artifactId>semargl-rdfa</artifactId>
                    <groupId>org.semarglproject</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>edu.stanford.protege</groupId>
            <artifactId>protege-editor-owl</artifactId>
            <type>bundle</type>
            <scope>provided</scope>
        </dependency>

        <!-- transitive dependencies -->
        <dependency>
            <groupId>org.abego.treelayout</groupId>
            <artifactId>org.abego.treelayout.core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish</groupId>
            <artifactId>javax.json</artifactId>
        </dependency>
        <dependency>
            <groupId>com.ibm.icu</groupId>
            <artifactId>icu4j</artifactId>
        </dependency>

        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>failureaccess</artifactId>
        </dependency>

        <!-- Testing -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>${h2.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Check that it.unibz.inf.ontop:ontop-protege-dependencies:jar:shaded points to a JAR (as occurs with 'mvn package'
                 or later phase) and not to a target/classes folder (as occurs with 'mvn compile'), as int the latter the compiler
                 plugin will fail due to relocated classes not being available. The check is done as follows:
                 - use maven-dependency-plugin:properties to add properties groupId:artifactId:type:classifier = <location on disk>
                 - use maven-enforcer-plugin to check value of it.unibz.inf.ontop:ontop-protege-dependencies:jar:shaded property,
                   failing with an informative error message (better than confusing compiler errors) if not pointing to a JAR -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>${maven-dependency-plugin.version}</version>
                <executions>
                    <execution>
                        <id>check-dependency-jar-is-available</id>
                        <goals>
                            <goal>properties</goal>
                        </goals>
                        <phase>${plugin.phase-prefix}process-resources</phase> <!-- right before compile phase -->
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>${maven-enforcer-plugin.version}</version>
                <executions>
                    <execution>
                        <id>check-dependency-jar-is-available</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <phase>${plugin.phase-prefix}process-resources</phase> <!-- right before compile phase -->
                        <configuration>
                            <rules>
                                <requireProperty>
                                    <property>it.unibz.inf.ontop:ontop-protege-dependencies:jar:shaded</property>
                                    <message>Unexpected error: cannot resolve dependency it.unibz.inf.ontop:ontop-protege-dependencies:jar:shaded</message>
                                    <regex>.*\.jar$</regex>
                                    <regexMessage><![CDATA[
#
#  Missing shaded Ontop dependencies:  ontop-protege-dependencies-${project.version}-shaded.jar
#
#  How to fix:
#  - in a multi-module build, please run 'mvn package -P<profile>' (or later target phase) instead of 'mvn compile -P<profile>' (*).
#  - if compiling ontop-protege-plugin separately, ensure that artifact ${project.groupId}:ontop-protege-dependencies:jar:${project.version}:shaded
#    (beware of 'shaded' classifier) is either installed in your local '~/.m2/repository' or is available in Maven Central with that version
#
#  (*) To enable compiling the ontop-protege-plugin, profile 'plugin' must be enabled (directly via '-Pplugin', or indirectly using a profile
#  depending on it: 'asset-plugin' building the OSGI plugin bundle; 'asset-protege' building the ZIP/tar.gz Protégé bundles; or `release`).
#  In a multi-module build, ontop-protege-dependencies-${project.version}-shaded.jar is only generated when running 'mvn package ...' or a
#  later target lifecycle phase (maven-shade-plugin can run only in that phase), therefore earlier phases will not have access to this JAR.
#  This issue cannot be solved while keeping at the same time the ontop-protege-plugin part of the ontop multi-module project hierarchy,
#  hence users should get used to always use 'mvn package -Pplugin' when working with the ontop-protege-plugin.
#
#  (note: ignore any [Help 1] note and link from Maven CLI, as it will not help dealing with this issue)
#
                                    ]]></regexMessage>
                                </requireProperty>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Generate OSGI artifact if enabled -->
            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
                <version>${maven-bundle-plugin.version}</version>
                <extensions>true</extensions>
                <executions>
                    <execution>
                        <id>attach-protege-bundle</id>
                        <phase>${asset-plugin.phase-prefix}package</phase>
                        <goals>
                            <goal>bundle</goal>
                        </goals>
                        <configuration>
                            <classifier>bundle</classifier>
                            <!-- The following is the set of instructions of how pack the bundle and how to create the
                                 MANIFEST.MF for the bundle. The configuration does 3 things.

                                 1. It makes sure that the "tight" dependencies are not packed as jars, but as .class files
                                    (inline). It makes sure that all the runtime dependencies are packed as jars.

                                 2. It makes sure all the protege plugin resources are packed (plugin.xml, tabs*.xml, etc).

                                 3. It makes sure the META-INF/MANIFEST.MF for OSGi bundles is created with the correct imports,
                                    exports and classpath.
                            -->

                            <instructions>
                                <finalName>${finalName}</finalName>
                                <Bundle-RequiredExecutionEnvironment>JavaSE-11</Bundle-RequiredExecutionEnvironment>
                                <!-- This makes sure any dependency in the obdalib <dependency> dependencies are packed
                                     as .classes (uncompressed, no jars) and the rest is packed as .jars -->
                                <Embed-Dependency>
                                    *;groupId=it.unibz.inf.ontop.*;inline=true,
                                    *;groupId=it.unibz.inf.ontop.protege.*;inline=true,
                                    *;groupId=!it.unibz.inf.ontop;scope=compile|runtime
                                </Embed-Dependency>

                                <!-- necessary for protege plugins -->
                                <Bundle-Category>protege</Bundle-Category>

                                <Bundle-ContactAddress>gh.xiao@gmail.com</Bundle-ContactAddress>
                                <Bundle-DocURL>${project.url}</Bundle-DocURL>
                                <Bundle-Name>Ontop OBDA Protégé plugin</Bundle-Name>
                                <Bundle-Description>${project.description}</Bundle-Description>
                                <Bundle-Vendor>${project.organization.name}</Bundle-Vendor>
                                <Implementation-Version>${project.version}</Implementation-Version>
                                <Update-Url>https://raw.githubusercontent.com/ontop/ontop/master/protege/plugin/update.properties</Update-Url>

                                <Export-Package>
                                    <!-- No need to export any package -->
                                </Export-Package>

                                <Import-Package>
                                	!javax.servlet.*,
                                    !javax.jms.*,
                                    !javax.mail.*,
                                    javax.*,
                                    com.google.common.*;version="[18.0,19)",
                                    org.osgi.framework;version="[1.8,2)",
                                    org.slf4j.*;version="[1.7,2)",
                                    org.protege.editor.*;version="[5.5,6)",
                                    !org.semanticweb.owlapi.model.axiomproviders,
                                    org.semanticweb.owlapi.*;version="[4.5,5)",
                                    uk.ac.manchester.cs.owl.owlapi.*;version="[4.5,5)"
                                </Import-Package>

                                <!-- The name of the plugin for OSGi dependencies. It has to be singleton
                                     or protege wont load it -->
                                <Bundle-SymbolicName>${symbolic.name};singleton:=true</Bundle-SymbolicName>

                                <Bundle-Activator>org.protege.osgi.jdbc.JdbcBundleActivator</Bundle-Activator>
                            </instructions>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
