# Workflow for lightweight tests in Ontop

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push for all branches or pull request events but only for the version4/releasing branches
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - version5
      - releasing/**
    types: [opened, edited, reopened]

jobs:
  build-run-non-docker-tests:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      # The java versions the job will run on
      matrix:
        jdk: [ 11, 17 ]

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      # Set up the java versions
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: ${{ matrix.jdk }}
          cache: 'maven'
      - name: Set maven opts
        run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
      - name: Run CI without docker tests
        run: ./mvnw install --fail-at-end

  check-secrets:
    runs-on: ubuntu-latest
    # Stores boolean value on whether secrets are available
    outputs:
      have_secrets: ${{ steps.setvar.outputs.have_secrets }}
    steps:
      # Sets the have_secrets variable to true or false
      - id: setvar
        run: |
          if [[ "${{ secrets.SF_ACCOUNT }}" != "" && \
                "${{ secrets.SF_USER }}" != "" && \
                "${{ secrets.SF_PASSWORD }}" != "" ]]; \
          then
            echo "Secrets to use a container registry were configured in the repo"
            echo "have_secrets=true" >> $GITHUB_OUTPUT
          else
            echo "Secrets to use a container registry were not configured in the repo"
            echo "have_secrets=false" >> $GITHUB_OUTPUT
          fi

  run-snowflake:
    # Checks if secrets are available
    if: needs.check-secrets.outputs.have_secrets == 'true'
    needs: [build-run-non-docker-tests , check-secrets]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      # The java versions the job will run on
      matrix:
        jdk: [ 11 ]

    steps:
      # Checks-out ontop repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v3
      # Set up the java versions
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: ${{ matrix.jdk }}
          cache: maven
      - name: Set maven opts
        run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
      - name: Run CI for Snowflake lightweight tests
        env:
          SF_ACCOUNT: ${{ secrets.SF_ACCOUNT }}
          SF_USER: ${{ secrets.SF_USER }}
          SF_PASSWORD: ${{ secrets.SF_PASSWORD }}
        run: cd test/lightweight-tests && ../../mvnw install -Dgroups="snowflakelighttests" -DskipTests=false -Dsnowflake.account=${SF_ACCOUNT} -Dsnowflake.user=${SF_USER} -Dsnowflake.password=${SF_PASSWORD} --fail-at-end

  run-athena:
    # Checks if secrets are available
    if: needs.check-secrets.outputs.have_secrets == 'true'
    needs: [ build-run-non-docker-tests , check-secrets ]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      # The java versions the job will run on
      matrix:
        jdk: [ 11 ]

    steps:
      # Checks-out ontop repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v3
      # Set up the java versions
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: ${{ matrix.jdk }}
          cache: maven
      - name: Set maven opts
        run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
      - name: Run CI for Athena lightweight tests
        env:
          ATHENA_USER: ${{ secrets.ATHENA_USER }}
          ATHENA_PASSWORD: ${{ secrets.ATHENA_PASSWORD }}
          ATHENA_BUCKET: ${{ secrets.ATHENA_BUCKET }}
        run: cd test/lightweight-tests && ../../mvnw install -Dgroups="athenalighttests" -DskipTests=false -Dathena.user=${ATHENA_USER} -Dathena.password=${ATHENA_PASSWORD} -Dathena.bucket=${ATHENA_BUCKET} --fail-at-end

#  run-bigquery:
#    # Checks if secrets are available
#    if: needs.check-secrets.outputs.have_secrets == 'true'
#    needs: [ build-run-non-docker-tests , run-athena ]
#    # The type of runner that the job will run on
#    runs-on: ubuntu-latest
#    strategy:
#      # The java versions the job will run on
#      matrix:
#        jdk: [ 11 ]
#
#    steps:
#      # Checks-out ontop repository under $GITHUB_WORKSPACE
#      - uses: actions/checkout@v3
#      # Set up the java versions
#      - name: Set up Java
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'corretto'
#          java-version: ${{ matrix.jdk }}
#          cache: maven
#      - name: Set maven opts
#        run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
#      - name: Run CI for BigQuery lightweight tests
#        env:
#          BIGQUERY_USER: ${{ secrets.BIGQUERY_USER }}
#          BIGQUERY_PASSWORD: ${{ secrets.BIGQUERY_PASSWORD }}
#          BIGQUERY_PROJECT: ${{ secrets.BIGQUERY_PROJECT }}
#          BIGQUERY_DOMAIN: ${{ secrets.BIGQUERY_DOMAIN }}
#        run: cd test/lightweight-tests && ../../mvnw install -Dgroups="bigquerylighttests" -DskipTests=false -Dbigquery.user=${BIGQUERY_USER} -Dbigquery.password=${BIGQUERY_PASSWORD} -Dbigquery.project=${BIGQUERY_PROJECT} -Dbigquery.domain=${BIGQUERY_DOMAIN} --fail-at-end

#  run-redshift:
#    # Checks if secrets are available
#    if: needs.check-secrets.outputs.have_secrets == 'true'
#    needs: [ build-run-non-docker-tests , run-athena ]
#    # The type of runner that the job will run on
#    runs-on: ubuntu-latest
#    strategy:
#      # The java versions the job will run on
#      matrix:
#        jdk: [ 11 ]
#
#    steps:
#      # Checks-out ontop repository under $GITHUB_WORKSPACE
#      - uses: actions/checkout@v3
#      # Set up the java versions
#      - name: Set up Java
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'corretto'
#          java-version: ${{ matrix.jdk }}
#          cache: maven
#      - name: Set maven opts
#        run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
#      - name: Run CI for Redshift lightweight tests
#        env:
#          REDSHIFT_USER: ${{ secrets.REDSHIFT_USER }}
#          REDSHIFT_PASSWORD: ${{ secrets.REDSHIFT_PASSWORD }}
#          REDSHIFT_ACCOUNT: ${{ secrets.REDSHIFT_ACCOUNT }}
#        run: cd test/lightweight-tests && ../../mvnw install -Dgroups="redshiftlighttests" -DskipTests=false -Dredshift.user=${REDSHIFT_USER} -Dredshift.password=${REDSHIFT_PASSWORD} -Dredshift.account=${REDSHIFT_ACCOUNT} --fail-at-end

  run-postgresql:
    needs: build-run-non-docker-tests
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      # The java versions the job will run on
      matrix:
        jdk: [ 11 ]

    steps:
      # Checks-out ontop repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v3
      # Set up the java versions
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: ${{ matrix.jdk }}
          cache: maven
      - name: Set maven opts
        run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
      - name: Set up docker
        run: cd test/lightweight-tests/lightweight-db-test-images &&
          docker-compose -f "docker-compose.lightweight.yml" up -d pgsql
      - name: Run CI for PostgreSQL docker tests
        run: cd test/lightweight-tests && ../../mvnw install -Dgroups="pgsqllighttests" -DskipTests=false --fail-at-end

  run-dremio:
    needs: run-postgresql
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jdk: [ 11 ]

    steps:
      # Checks-out ontop repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v3
      # Set up the java versions
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: ${{ matrix.jdk }}
          cache: maven
      - name: Set maven opts
        run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
      - name: Set up docker
        run: cd test/lightweight-tests/lightweight-db-test-images &&
          docker-compose -f "docker-compose.lightweight.yml" up -d pgsql dremio
      - name: Sleep for 20 seconds
        run: sleep 20s
        shell: bash
      # Runs all tests specific to a db engine
      - name: Run CI for Dremio docker tests
        run: cd test/lightweight-tests && ../../mvnw install -Dgroups="dremiolighttests" -DskipTests=false --fail-at-end

  run-mssql:
    needs: run-dremio
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jdk: [ 11 ]

    steps:
      # Checks-out ontop repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v3
      # Set up the java versions
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: ${{ matrix.jdk }}
          cache: maven
      - name: Set maven opts
        run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
      - name: Set up docker
        run: cd test/lightweight-tests/lightweight-db-test-images &&
          docker-compose -f "docker-compose.lightweight.yml" up -d mssql
      # Runs all tests specific to a db engine
      - name: Run CI for SQLServer docker tests
        run: cd test/lightweight-tests && ../../mvnw install -Dgroups="mssqllighttests" -DskipTests=false --fail-at-end

  run-mysql-v8:
    needs: [run-mssql]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jdk: [ 11 ]

    steps:
      # Checks-out ontop repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v3
      # Set up the java versions
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: ${{ matrix.jdk }}
          cache: maven
      - name: Set maven opts
        run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
      - name: Set up docker
        run: cd test/lightweight-tests/lightweight-db-test-images &&
          docker-compose -f "docker-compose.lightweight.yml" up -d mysql-v8
      # Runs all tests specific to a db engine
      - name: Run CI for MySQL docker tests
        run: cd test/lightweight-tests && ../../mvnw install -Dgroups="mysqllighttests" -DskipTests=false --fail-at-end

  run-mysql-v5:
    needs: [ run-mssql ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jdk: [ 11 ]

    steps:
      # Checks-out ontop repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v3
      # Set up the java versions
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: ${{ matrix.jdk }}
          cache: maven
      - name: Set maven opts
        run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
      - name: Set up docker
        run: cd test/lightweight-tests/lightweight-db-test-images &&
          docker-compose -f "docker-compose.lightweight.yml" up -d mysql-v5
      # Runs all tests specific to a db engine
      - name: Set Environment Variable for MySQL 5 # Needed to skip tests
        run: echo "MYSQL_VERSION=5" >> $GITHUB_ENV
      - name: Run CI for MySQL v5.x docker tests
        run: cd test/lightweight-tests && ../../mvnw install -Dgroups="mysqllighttests" -DskipTests=false --fail-at-end
        env:
          MYSQL_VERSION: ${{ env.MYSQL_VERSION }}

  run-mariadb:
    needs: [run-mysql-v8]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jdk: [ 11 ]

    steps:
      # Checks-out ontop repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v3
      # Set up the java versions
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: ${{ matrix.jdk }}
          cache: maven
      - name: Set maven opts
        run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
      - name: Set up docker
        run: cd test/lightweight-tests/lightweight-db-test-images &&
          docker-compose -f "docker-compose.lightweight.yml" up -d mariadb
      # Runs all tests specific to a db engine
      - name: Run CI for MariaDB docker tests
        run: cd test/lightweight-tests && ../../mvnw install -Dgroups="mariadblighttests" -DskipTests=false --fail-at-end

  run-oracle:
    needs: [run-mariadb]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jdk: [ 11 ]

    steps:
      # Checks-out ontop repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v3
      # Set up the java versions
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: ${{ matrix.jdk }}
          cache: maven
      - name: Set maven opts
        run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
      - name: Set up docker
        run: cd test/lightweight-tests/lightweight-db-test-images &&
          docker-compose -f "docker-compose.lightweight.yml" up -d oracle
      - name: Sleep for 60 seconds
        run: sleep 60s
        shell: bash
      # Runs all tests specific to a db engine
      - name: Run CI for Oracle docker tests
        run: cd test/lightweight-tests && ../../mvnw install -Dgroups="oraclelighttests" -DskipTests=false --fail-at-end

  run-db2:
    needs: [ run-oracle ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jdk: [ 11 ]

    steps:
      # Checks-out ontop repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v3
      # Set up the java versions
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: ${{ matrix.jdk }}
          cache: maven
      - name: Set maven opts
        run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
      - name: Set up docker
        run: cd test/lightweight-tests/lightweight-db-test-images &&
          docker-compose -f "docker-compose.lightweight.yml" up -d db2
      - name: Sleep for 240 seconds
        run: sleep 240s
        shell: bash
      # Runs all tests specific to a db engine
      - name: Run CI for DB2 docker tests
        run: cd test/lightweight-tests && ../../mvnw install -Dgroups="db2lighttests" -DskipTests=false --fail-at-end


  run-spark:
    needs: run-postgresql
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jdk: [ 11 ]

    steps:
      # Checks-out ontop repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v3
      # Set up the java versions
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: ${{ matrix.jdk }}
          cache: maven
      - name: Set maven opts
        run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
      - name: Set up docker
        run: cd test/lightweight-tests/lightweight-db-test-images &&
          docker-compose -f "docker-compose.lightweight.yml" up -d spark
      - name: Sleep for 150 seconds
        run: sleep 150s
        shell: bash
      # Runs all tests specific to a db engine
      - name: Run CI for Spark SQL docker tests
        run: cd test/lightweight-tests && ../../mvnw install -Dgroups="sparksqllighttests" -DskipTests=false --fail-at-end

  run-trino:
    needs: run-db2
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jdk: [ 11 ]

    steps:
      # Checks-out ontop repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v3
      # Set up the java versions
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: ${{ matrix.jdk }}
          cache: maven
      - name: Set maven opts
        run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
      - name: Set up docker
        run: cd test/lightweight-tests/lightweight-db-test-images &&
          docker-compose -f "docker-compose.lightweight.yml" up -d pgsql trino
      - name: Sleep for 20 seconds
        run: sleep 20s
        shell: bash
      # Runs all tests specific to a db engine
      - name: Run CI for Trino Docker tests
        run: cd test/lightweight-tests && ../../mvnw install -Dgroups="trinolighttests" -DskipTests=false --fail-at-end

  run-presto:
    needs: run-db2
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jdk: [ 11 ]

    steps:
      # Checks-out ontop repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v3
      # Set up the java versions
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: ${{ matrix.jdk }}
          cache: maven
      - name: Set maven opts
        run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
      - name: Set up docker
        run: cd test/lightweight-tests/lightweight-db-test-images &&
          docker-compose -f "docker-compose.lightweight.yml" up -d pgsql presto
      - name: Sleep for 20 seconds
        run: sleep 20s
        shell: bash
      # Runs all tests specific to a db engine
      - name: Run CI for Presto Docker tests
        run: cd test/lightweight-tests && ../../mvnw install -Dgroups="prestolighttests" -DskipTests=false --fail-at-end

  run-duckdb:
    needs: run-trino
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jdk: [ 11 ]

    steps:
      # Checks-out ontop repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v3
      # Set up the java versions
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: ${{ matrix.jdk }}
          cache: maven
      - name: Set maven opts
        run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
      - name: Set up docker
        run: cd test/lightweight-tests/lightweight-db-test-images
      - name: Sleep for 20 seconds
        run: sleep 20s
        shell: bash
      # Runs all tests specific to a db engine
      - name: Run CI for Presto Docker tests
        run: cd test/lightweight-tests && ../../mvnw install -Dgroups="duckdblighttests" -DskipTests=false --fail-at-end