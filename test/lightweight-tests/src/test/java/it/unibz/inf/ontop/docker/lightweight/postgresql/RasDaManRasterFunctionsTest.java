package it.unibz.inf.ontop.docker.lightweight.postgresql;

import com.google.common.collect.ImmutableList;
import it.unibz.inf.ontop.docker.lightweight.AbstractDockerRDF4JTest;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.sql.SQLException;

public class RasDaManRasterFunctionsTest extends AbstractDockerRDF4JTest {
    private static final String PROPERTIES_FILE = "/rasdaman/OntoRaster.properties";
    private static final String OBDA_FILE = "/rasdaman/OntoRasterExperimental.obda";
    private static final String OWL_FILE = "/rasdaman/rasdaman.owl";

    @BeforeAll
    public static void before() throws IOException, SQLException {
        initOBDA(OBDA_FILE, OWL_FILE, PROPERTIES_FILE);
    }

    @AfterAll
    public static void after() throws SQLException {
        release();
    }

    //////////////////////////////
    ////// OntoRaster.obda ///////
    //////////////////////////////

    @Test
    public void testConnection() {

        String query1 = "PREFIX :\t<https://github.com/aghoshpro/OntoRaster/>\n"
                + "PREFIX rasdb:\t<https://github.com/aghoshpro/RasterDataCube/>\n"
                + "SELECT * {\n"
                + "?x rasdb:hasConnection ?v .\n"
                + "}\n";

        executeAndCompareValues(query1, ImmutableList.of("\"RasDaMan is connected\"^^xsd:string"));
    }

    @Test
    public void getRasterArrayTemporal() {

        String query7 = "PREFIX :\t<http://www.semanticweb.org/arkaghosh/OntoRaster/>\n"
                + "PREFIX rdfs:\t<http://www.w3.org/2000/01/rdf-schema#>\n"
                + "PREFIX geo:\t<http://www.opengis.net/ont/geosparql#>\n"
                + "PREFIX rasdb:\t<http://www.semanticweb.org/RasterDataCube/>\n"
                + "SELECT ?v {\n"
                + "?x rasdb:hasRasterName ?raster_name .\n"
                + "FILTER (?raster_name = 'Surface_Temperature_Sweden'\n)"
                + "BIND (49 AS ?start_time\n)"
                + "BIND (50 AS ?end_time\n)"
                + "BIND (rasdb:rasSmallRasterArrayTemp(?start_time, ?end_time, ?raster_name) AS ?v)" //%s %s %s
                + "}\n";

        executeAndCompareValues(query7, ImmutableList.of("\"{{{0,0,0},{0,0,0},{0,0,0}},{{0,0,0},{0,0,0},{0,0,0}}}\"^^xsd:string")); //Array issue in RDF @Diego
    }

    @Test
    public void getRasterArraySpatial() {

        String query8 = "PREFIX :\t<http://www.semanticweb.org/arkaghosh/OntoRaster/>\n"
                + "PREFIX rdfs:\t<http://www.w3.org/2000/01/rdf-schema#>\n"
                + "PREFIX geo:\t<http://www.opengis.net/ont/geosparql#>\n"
                + "PREFIX rasdb:\t<http://www.semanticweb.org/RasterDataCube/>\n"
                + "SELECT ?v {\n"
                + "?x rasdb:hasRasterName ?raster_name .\n"
                + "FILTER (?raster_name = 'South_Tyrol_Temperature_MODIS_1km'\n)"
                + "BIND (rasdb:rasSmallRasterArraySpatial(49, ?raster_name) AS ?v)" //%s %s
                + "}\n";

        executeAndCompareValues(query8, ImmutableList.of("\"{{0,0,0},{0,0,0},{0,0,0}}\"^^xsd:string")); //Array issue in RDF @Diego
    }

    @Test
    public void clipRaster() {
        String query9 = "PREFIX :\t<http://www.semanticweb.org/arkaghosh/OntoRaster/>\n"
                + "PREFIX rdfs:\t<http://www.w3.org/2000/01/rdf-schema#>\n"
                + "PREFIX geo:\t<http://www.opengis.net/ont/geosparql#>\n"
                + "PREFIX rasdb:\t<http://www.semanticweb.org/RasterDataCube/>\n"
                + "SELECT ?v {\n"
                + "?r rdfs:label ?region_name .\n"
                + "?r geo:asWKT ?region .\n"
                + "?x rasdb:hasRasterName ?raster_name .\n"
                + "?x rasdb:hasMinLongitude ?min_lon .\n"
                + "?x rasdb:hasMaxLatitude ?max_lat .\n"
                + "?x rasdb:hasSpatialResolution_lon ?x_res .\n"
                + "?x rasdb:hasSpatialResolution_lat ?y_res .\n"
                + "FILTER (CONTAINS(?region_name, 'Deggendorf')\n)" //Regen Erding Kelheim Link√∂ping Deggendorf Ultimo and ALSO change 3 params in geo2grid_coords function
                + "FILTER (CONTAINS(?raster_name, 'Baveria')\n)" //Baveria_Temperature_MODIS_1km, Surface_Temperature_Sweden, South_Tyrol_Temperature_MODIS_1km
                + "BIND (100 AS ?time\n)"
                + "BIND (rasdb:rasClipRaster(?time, ?region, ?min_lon, ?max_lat, ?x_res, ?y_res, ?raster_name) AS ?v)"
                + "}\n";

        executeAndCompareValues(query9, ImmutableList.of("\"{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13417,13414,13446,13446,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13351,13351,13337,13323,13323,13394,13434,13434,13521,13582,13680,13680,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13405,13396,13396,13391,13401,13401,13415,13410,13423,13423,13433,13561,13561,13613,13720,13720,13748},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13359,13359,13373,13395,13446,13446,13481,13477,13477,13487,13500,13500,13433,13737,13737,13737,13765,13765,13787},{0,0,0,0,0,0,0,0,0,0,0,0,0,13246,13246,13382,13423,13423,0,13591,13591,13591,13557,13557,13576,13608,13691,13691,13739,13762,13762,13782,13791,13791},{0,0,0,0,0,0,0,0,0,13163,13157,13157,13182,13246,13246,13325,13369,13369,13445,13469,13602,13602,13663,13662,13662,13681,13703,13703,13728,13745,13745,13779,13772,13772},{0,0,0,0,0,0,0,0,13127,13188,13214,13214,13230,13284,13330,13330,13380,13412,13412,13464,13519,13519,13668,13700,13700,13718,13741,13741,13748,13757,13755,13755,13738,13720},{0,0,0,0,0,0,13204,13167,13215,13215,13299,13318,13318,13329,13363,13363,13409,13450,13450,13462,13455,13455,13657,13677,13735,13735,13716,13699,13699,13762,13743,13743,13733,0},{0,0,0,0,0,13199,13199,13232,13295,13295,13363,13377,13377,13366,13389,13389,13403,13474,13519,13519,13629,13658,13658,13692,13699,13699,13654,13590,13590,13432,13427,13437,13437,13516},{0,0,0,0,0,13200,13200,13250,13353,13353,13381,13425,13405,13405,13403,13421,13421,13465,13620,13620,13626,13642,13642,13659,13638,13575,13575,13486,13433,13433,13430,13424,0,0},{0,0,0,13084,13084,13177,13285,13285,13372,13432,13432,13439,13465,13465,13497,13504,13504,13620,13620,13618,13618,13609,13571,13571,13583,13537,13537,13444,13443,0,0,0,0,0},{0,13113,13109,13157,13157,13184,13298,13298,13354,13489,13489,13489,0,13504,13504,13564,13596,13596,13617,13619,13619,13600,13494,13494,13466,13415,13415,13448,0,0,0,0,0,0},{13097,13097,13137,13198,13198,13286,13361,13389,13389,13389,13380,13380,0,0,0,13596,13596,13596,13610,13549,13549,13496,13482,13458,13458,13414,13450,13450,0,0,0,0,0,0},{0,13151,13151,13182,13312,13312,13340,13394,13394,13385,13380,13380,0,13392,13392,13392,13422,13447,13447,13475,13407,13407,13386,13372,13372,13412,0,0,0,0,0,0,0,0},{0,0,13193,13184,13280,13280,13300,13331,13331,13328,13334,13448,13448,13443,13392,13392,13414,13427,13427,13463,13391,13391,13381,13404,13461,0,0,0,0,0,0,0,0,0},{0,0,13236,13236,13251,13267,13267,13265,13287,13287,13340,13397,13397,13408,13333,13333,13356,13374,13434,13434,13397,13381,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,13311,13262,13228,13228,13256,13276,13276,13344,13346,13349,13349,13315,13323,13323,13336,13355,13355,13371,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,13275,13231,13251,13251,13287,13281,13281,13272,13293,13293,0,13345,13345,13360,13366,13366,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,13330,13324,13314,13314,13291,13306,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}\"^^xsd:string")); //xsd:array is not available
    }

    @Test
    public void clipRasterWithCustomGeometry() {

        String query6 = "PREFIX :\t<http://www.semanticweb.org/arkaghosh/OntoRaster/>\n"
                + "PREFIX rdfs:\t<http://www.w3.org/2000/01/rdf-schema#>\n"
                + "PREFIX geo:\t<http://www.opengis.net/ont/geosparql#>\n"
                + "PREFIX rasdb:\t<http://www.semanticweb.org/RasterDataCube/>\n"
                + "SELECT ?v {\n"
                + "?x rasdb:hasRasterName ?raster_name .\n"
                + "BIND ('POLYGON((18.10546875 64.63799838956572,19.116210937500004 64.64740843756522,18.8525390625 64.40168493621215,17.6220703125 64.3541764315921,18.10546875 64.63799838956572))' AS ?usr_polygon\n)"
                + "FILTER (CONTAINS(?raster_name, 'Sweden')\n)"
                + "BIND (100 AS ?time\n)"
                + "BIND (rasdb:rasClipRasterAnyGeom(?time, ?usr_polygon, ?raster_name) AS ?v)"
                + "}\n";

        executeAndCompareValues(query6, ImmutableList.of("\"{{14335,14347,14341,14341,14322,14319,14319,14326,14324,14324,14303,14312,14312,14304,14324,14324,14348,14366,14366,14366,14348,14348,14325,14317,14317,14317,14320,14320,14344,14381,14381,14310,14357,14357,14348,14330," + "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}," +  "{14337,14337,14346,14347,14347,14323,14304,14304,14323,14309,14309,14309,14311,14311,14329,14362,14362,14386,14357,14357,14318,14291,14291,14294,14295,14295,14293,14334,14334,14403,14403,14403,14380,14361,14361,14312,14272,14272,14298,14279,14279,14299,14296,14296,14287,14277,14277,14255,14230,14230,14231,14248,14248,14264,14274,14274,14274,14261,14261,14293,14292,14292,14280,14285,14285,14292,14274,14274,14270,14274,14274},{14349,14349,14357,14375,14375,14328,14315,14315,14333,14329,14329,14321,14327,14327,14330,14386,14386,14393,14317,14317,14303,14291,14291,14296,14307,14307,14296,14348,14348,14388,14384,14384,14351,14335,14335,14310,14284,14284,14291,14288,14288,14288,14290,14290,14288,14275,14275,14238,14220,14220,14231,14245,14245,14254,14265,14265,14257,14258,14258,14270,14273,14273,14271,14290,14290,14302,14307,14307,14279,14250,14250},{14326,14318,14318,14342,14331,14331,14330,14329,14329,14317,14293,14293,14357,14420,14420,14407,14400,14400,14317,14307,14307,14312,14321,14321,14317,14312,14312,14340,14357,14357,14351,14343,14343,14318,14296,14296,14269,14285,14285,14314,0,0,14318,14302,14302,14291,14267,14267,14256,14256,14258,14251,14251,14262,14264,14264,14255,14257,14257,14263,14271,14271,14262,14281,14281,14293,14296,14296,14288,14250,14250},{14307,14314,14314,14315,14332,14332,14350,14335,14335,14345,14357,14357,14412,14424,14424,14415,14375,14375,14354,14372,14372,14347,14331,14331,14333,14337,14337,14333,14364,14364,14373,14344,14344,14347,14327,14327,14272,14303,14303,14364,14354,14354,14318,14313,14313,14301,14275,14275,14248,14242,14242,14236,14250,14250,14262,14262,14262,14262,14264,14264,14274,14282,14282,14288,14290,14290,14296,14279,14279,14254,14246},{14306,14312,14331,14331,14356,14372,14372,14337,14345,14345,14354,14354,14372,14398,14398,14408,14385,14385,14371,14372,14372,14352,14344,14344,14357,14360,14360,14338,14316,14316,14317,14335,14335,14363,14365,14365,14308,14318,14318,14360,14348,14348,14331,14311,14311,14292,14268,14268,14252,14247,14247,14244,14246,14246,14269,14278,14278,14285,14288,14288,14285,14284,14284,14288,14279,14279,14279,14269,14269,14248,14243},{14323,14325,14376,14376,14387,14362,14362,14338,14326,14326,14325,14323,14323,14365,14396,14396,14392,14388,14388,14374,14360,14360,14339,14363,14363,14343,14353,14353,14338,14311,14311,14305,14344,14344,14324,14304,14304,14310,14324,14324,14342,14347,14347,14326,14280,14280,14266,14259,14259,14252,14257,14257,14266,14280,14280,14285,14271,14271,14263,14260,14260,14276,14282,14282,14279,14272,14272,14263,14256,14256,14259},{14354,14337,14371,14371,14363,14344,14344,14323,14312,14312,14302,14306,14306,14333,14354,14354,14377,14395,14395,14366,14365,14365,14348,14359,14359,14371,14374,14374,14387,14368,14368,14363,14373,14373,14355,14320,14320,14304,14312,14312,14337,14368,14368,14381,14306,14306,14268,14261,14261,14245,14247,14247,14278,14317,14317,14343,14287,14287,14256,14275,14275,14283,14281,14281,14277,14263,14263,14262,14249,14249,14264},{14388,14388,14400,14383,14383,14342,14312,14312,14310,14307,14307,14316,14328,14328,14333,14330,14330,0,0,0,14368,14369,14369,14371,14385,14385,14380,14395,14395,14382,14358,14358,14365,14377,14377,14359,14356,14356,14343,14355,14355,14372,14396,14396,14326,14286,14286,14303,14344,14344,14392,14402,14402,14414,14408,14408,14373,14336,14336,14303,14292,14292,14284,14277,14277,14263,14259,14259,14251,14244,14244},{0,14398,14414,14410,14410,14387,14369,14369,14346,14333,14333,14326,14328,14328,14324,14324,14324,14416,0,0,0,14379,14379,14412,14414,14414,14409,14402,14402,14387,14348,14348,14364,14398,14398,14398,0,0,14373,14378,14378,14361,14336,14336,14325,14330,14330,14364,14431,14431,14454,14510,14510,14498,14428,14428,14379,14343,14343,14304,14287,14287,14292,14301,14301,14284,14261,14261,14257,14251,0},{0,14391,14391,14398,14410,14410,14408,14368,14368,14347,14332,14332,14348,14367,14367,14382,14417,14417,14416,14422,14422,14394,14396,14396,14414,14438,14438,14426,14426,14426,0,0,0,14398,0,0,0,14384,14384,14387,14364,14364,14378,14406,14406,14400,14375,14375,14396,14344,14344,14317,14276,14276,14267,14279,14279,14295,14311,14311,14305,14298,14298,14296,14298,14298,14269,14249,14249,14252,0},{0,14367,14367,14378,14394,14394,14398,14359,14359,14347,14335,14335,14369,14402,14402,14412,14435,14435,14439,14422,14422,14415,14390,14390,14403,14438,14438,14426,14426,14426,0,0,0,0,0,0,0,14384,14384,14386,14369,14369,14360,14363,14363,14299,14266,14266,14267,14266,14266,14274,14298,14298,14333,14291,14291,14308,14315,14315,14307,14296,14296,14288,14291,14291,14278,14249,14249,14241,0},{0,14364,14375,14375,14375,14386,14386,14392,14353,14353,14330,14359,14359,14393,14410,14410,14419,0,0,14423,14423,14423,0,0,0,0,0,0,0,0,0,0,0,0,0,14402,14402,14402,14296,14296,14306,14303,14303,14295,14287,14287,14286,14287,14287,14285,14287,14287,14302,14323,14323,14323,14316,14316,14309,14301,14301,14292,14296,14296,14298,14278,14278,14249,14238,14238,0},{0,14393,14384,14384,14368,14375,14375,14396,14384,14384,14386,14369,14369,14371,14391,14391,14408,0,0,0,14436,14436,14436,0,0,0,0,0,0,0,0,0,0,0,14406,14404,14404,14398,0,0,14293,14260,14260,14263,14286,14286,14319,14373,14373,14328,14303,14303,14300,14303,14303,14303,14316,14316,0,14311,14311,14305,14294,14294,14281,14263,14263,14231,14231,14231,0},{0,14415,14416,14346,14346,14327,14361,14361,14391,14419,14419,14408,14371,14371,14379,14411,14411,14415,14454,14454,14445,14439,14439,14443,14443,14443,14452,14453,14453,0,14458,14458,14418,14415,14415,14407,14403,14403,14404,14280,14280,14271,14263,14263,14305,14320,14320,14347,14347,14347,14383,14367,14367,14325,14292,14292,14314,14307,14307,14344,14325,14325,14302,14276,14276,14255,14233,14233,14229,14239,0},{0,14366,14357,14346,14346,14330,14339,14339,14371,14399,14399,14412,14411,14411,14379,14405,14405,14438,14451,14451,14447,14464,14464,14464,14452,14452,14455,14453,14453,14458,14458,14458,0,14425,14425,14410,14399,14399,14387,14360,14360,14315,14269,14269,14309,14320,14320,14341,14358,14358,14385,14384,14384,14327,14303,14303,14296,14287,14287,14321,14304,14304,14289,14273,14273,14257,14217,14217,14233,14247,0},{0,14309,14312,14311,14311,14314,14343,14343,14370,14382,14382,14394,14411,14411,0,0,0,14454,14454,14454,14443,14468,14468,14469,14471,14471,14471,0,0,0,14458,14458,0,14447,14447,14431,14408,14408,14385,14373,14373,14326,14291,14291,14284,14321,14321,14330,14358,14358,14379,14371,14371,14291,14302,14302,14264,14286,14286,14284,14284,14284,14287,14285,14285,14271,14254,14254,14265,14267,0},{0,14305,14305,14338,14356,14356,14380,14383,14383,14383,14377,14377,0,0,0,14453,0,0,0,0,0,14469,14469,14469,0,0,0,14466,14466,14466,0,14457,14457,14459,14455,14455,14424,14393,14393,14375,14350,14350,14334,14334,14334,14331,14330,14330,14356,14361,14361,14283,14291,14291,14301,14301,14301,14300,14293,14293,14303,14292,14292,14293,14285,14285,14283,14277,14277,14257,0},{0,14341,14341,14385,14397,14397,14401,14402,14402,14401,14401,14401,0,0,0,14453,14450,14450,14438,14438,14438,0,0,0,0,0,0,14464,14453,14453,14455,14447,14447,14447,0,0,14411,14407,14407,14384,14353,14353,0,0,0,0,14287,14287,14289,14294,14294,14283,14293,14293,14297,14297,14297,14301,14294,14294,14297,14290,14290,14289,14288,14288,14277,14255,14255,14243,0},{0,14357,14378,14378,14387,14401,14401,14397,14397,14397,14411,14456,14456,14462,14442,14442,14431,14438,14438,14438,0,0,0,0,0,0,0,0,14447,14456,14456,14457,14456,14456,0,0,0,14417,14417,14417,0,0,0,14334,14334,14334,14349,14297,14297,14283,14272,14272,14272,14280,14280,14275,14291,14291,14287,14290,14290,14291,14291,14291,14301,14278,14278,14252,14246,14246,0},{0,14340,14349,14349,14376,0,0,14403,14401,14401,14425,14455,14455,14463,14455,14455,14428,0,0,0,0,0,0,14461,14461,14461,0,0,0,14458,14458,14458,14456,14456,0,14393,14393,14409,14407,14407,14403,0,0,0,14334,14334,14345,14319,14319,14298,14309,14309,14334,14290,14290,14283,14286,14286,14281,14281,14281,14291,14284,14284,14313,14294,14294,14269,14250,14250,0},{0,14336,14325,14363,14363,14383,14382,14382,14394,14432,14432,14446,14441,14441,14423,14410,14410,0,0,0,14452,14452,14452,14462,14463,14463,0,14447,14447,14447,14447,14447,14417,14410,14410,14400,14394,14394,14399,14403,14403,0,0,0,0,14350,14350,14334,14299,14299,14315,14368,14368,14357,14332,14332,14304,14290,14290,14280,14294,14294,14287,14288,14288,14291,14280,14280,14259,14251,0},{0,14340,14327,14343,14343,14374,14377,14377,14389,14423,14423,14435,14420,14420,14395,14426,14426,14429,14435,14435,14452,14455,14455,14463,14463,14463,0,14436,14436,14440,14424,14424,14413,14414,14414,14406,0,0,0,0,0,14346,14352,14352,14370,14398,14398,14363,14348,14348,14343,14356,14356,14368,14350,14350,14382,14323,14323,14303,14297,14297,14300,14309,14309,14300,14267,14267,14267,14266,0},{0,14303,14316,14356,14356,14362,14364,14364,14389,14418,14401,14401,14409,14375,14375,14422,14440,14440,14440,14442,14442,14448,0,0,0,0,0,14436,14423,14423,14402,14389,14389,0,0,0,14394,14394,14394,0,14339,14339,14337,14343,14343,14343,14356,14356,14351,14345,14345,14348,14379,14379,14353,14378,14378,14370,14337,14337,14311,14310,14310,14303,14312,14312,14297,14290,14290,14288,0},{0,14355,14355,14359,14367,14367,14383,14390,14390,14390,14375,14375,14388,14389,14389,14406,14417,14417,14403,14421,14421,14419,14411,14411,14411,14411,14411,14402,14381,14381,14357,14354,14354,14362,14388,14388,14386,14373,14373,0,14378,14378,14329,14340,14340,14319,14305,14305,14321,14341,14341,14332,14348,14348,14346,14334,14334,14318,14330,14330,14311,14310,14310,14303,14311,14311,14319,14324,14324,14324,0},{0,0,14292,14296,14354,14354,14407,14396,14396,14388,14391,14391,14405,14406,14406,14400,14388,14388,14387,14417,14417,14413,14401,14401,14400,14409,14409,14394,14345,14345,14309,14324,14324,14353,14382,14385,14385,14352,14348,14348,14378,14378,14378,14351,14342,14342,14316,14297,14297,14302,14300,14300,14313,14328,14328,14323,14321,14321,14319,14302,14302,14292,14282,14282,14307,14321,14321,14333,14339,0,0},{0,0,14309,14309,14366,14393,14393,14386,14369,14369,14359,14362,14362,14367,14393,14393,14362,14364,14364,14376,14373,14373,14359,14370,14370,14404,14385,14385,14343,14316,14316,14315,14333,14333,14378,14356,14356,14324,14332,14332,14342,0,0,14359,14357,14357,14339,14326,14326,14326,14318,14318,14315,14331,14331,14311,14313,14313,14328,14313,14313,14306,14296,14296,14300,14297,14297,14312,14352,0,0},{0,0,14299,14299,14334,14361,14361,14361,14340,14340,14319,14336,14336,14357,14355,14355,14350,14354,14354,14366,14374,14374,14365,14389,14389,14388,14371,14371,14342,14320,14320,14319,14305,14305,14348,14345,14345,14319,14326,14326,14361,0,0,14366,14352,14352,14334,14332,14332,14331,14330,14330,14329,14320,14311,14311,14330,14361,14361,14354,14341,14341,14324,14311,14311,14317,14336,14336,14323,0,0},{0,0,14318,14330,14330,14327,14340,14340,14341,14325,14325,14333,14349,14349,14353,14347,14347,14358,14368,14368,14371,14376,14376,14381,14375,14375,14357,14329,14329,14330,14332,14332,14360,14373,14373,14338,14319,14319,14304,14326,14326,14334,14329,14329,14338,14309,14309,14302,14318,14318,14326,14321,14321,14320,14307,14307,14337,14352,14352,14359,14355,14355,14344,14338,14338,14342,14343,14343,14310,0,0},{0,0,14319,14350,14350,14372,14390,14390,14395,14375,14375,14363,14372,14372,14363,14360,14360,14365,14367,14367,14370,14373,14373,14387,14393,14393,14360,14330,14330,14330,14339,14339,14327,14354,14354,14338,14310,14310,14290,14285,14285,14306,14307,14307,14295,14299,14299,14309,14327,14327,14345,14339,14339,14346,14342,14342,14360,14374,14374,14371,14341,14341,14350,14358,14358,14342,14333,14333,14335,0,0},{0,0,14335,14366,14387,14387,14405,14412,14412,14401,14391,14391,14398,14391,14391,14380,14365,14365,14366,14372,14372,14375,14378,14378,14394,14339,14339,14337,14333,14333,14326,14315,14315,14321,14318,14318,14301,14273,14273,14280,14311,14311,14314,14295,14295,14292,14320,14320,14348,14360,14360,14374,14372,14372,14373,14375,14375,14364,14358,14358,14362,14366,14366,14345,14322,14322,14299,14282,14282,0,0},{0,0,14365,14369,14364,14364,14364,14362,14362,14383,14387,14387,14398,14396,14396,14387,14372,14372,14369,14360,14360,14362,14371,14371,14367,14348,14348,14348,14336,14336,14326,14320,14320,14306,14286,14286,14294,14276,14276,14284,14303,14303,14307,14289,14289,14292,14322,14322,14338,14332,14332,14342,14365,14365,14370,14361,14361,14332,14327,14327,14334,14332,14332,14321,14330,14330,14298,14269,14269,0,0},{0,0,14352,14372,14350,14350,14351,14374,14374,14396,14367,14365,14365,14368,14377,14377,14376,14359,14359,14342,14345,14345,14356,14361,14361,14351,14339,14339,14322,14307,14307,14311,14307,14307,14278,14284,14284,14296,14295,14295,14293,14303,14303,14309,14292,14292,14300,14311,14311,14310,14305,14305,14338,14346,14346,14344,14328,14328,14327,14342,14342,14362,14341,14341,14336,14332,14332,14301,14271,0,0},{0,0,14365,14365,14327,14303,14303,14358,14363,14363,14357,14352,14352,14367,14381,14381,14387,14387,14387,14359,14357,14357,14347,14348,14348,14343,14323,14323,14309,14291,14291,14297,14287,14287,14279,14292,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}\"^^xsd:string")); //xsd:array is not available
    }


    @Test
    public void minRasterSPATIALX() {

        String query10 = "PREFIX :\t<http://www.semanticweb.org/arkaghosh/OntoRaster/>\n"
                + "PREFIX rdfs:\t<http://www.w3.org/2000/01/rdf-schema#>\n"
                + "PREFIX geo:\t<http://www.opengis.net/ont/geosparql#>\n"
                + "PREFIX rasdb:\t<http://www.semanticweb.org/RasterDataCube/>\n"
                + "SELECT ?v {\n"
                + "?r rdfs:label ?region_name .\n"
                + "?r geo:asWKT ?region .\n"
                + "?x rasdb:hasRasterName ?raster_name .\n"
                + "?x rasdb:hasMinLongitude ?min_lon .\n"
                + "?x rasdb:hasMaxLatitude ?max_lat .\n"
                + "?x rasdb:hasSpatialResolution_lon ?x_res .\n"
                + "?x rasdb:hasSpatialResolution_lat ?y_res .\n"
                + "FILTER (?region_name = 'M√ºnchen'\n)" //Vector region = W√ºrzburg Erding, Kelheim, Link√∂ping, Ultimo
                + "FILTER (CONTAINS(?raster_name, 'Baveria')\n)" //Raster Dataset = Bavaria_Temperature_MODIS_1km, Surface_Temperature_Sweden, South_Tyrol_Temperature_MODIS_1km
                + "BIND (100 AS ?time\n)"
                + "BIND (rasdb:rasSpatialMinimumX(?time, ?region, ?min_lon, ?max_lat, ?x_res, ?y_res, ?raster_name) AS ?v)"
                + "}\n";

        executeAndCompareValues(query10, ImmutableList.of("\"13554\"^^xsd:integer"));
    }

    @Test
    public void maxRasterSPATIALX() {

        String query11 = "PREFIX :\t<http://www.semanticweb.org/arkaghosh/OntoRaster/>\n"
                + "PREFIX rdfs:\t<http://www.w3.org/2000/01/rdf-schema#>\n"
                + "PREFIX geo:\t<http://www.opengis.net/ont/geosparql#>\n"
                + "PREFIX rasdb:\t<http://www.semanticweb.org/RasterDataCube/>\n"
                + "SELECT ?v {\n"
                + "?r rdfs:label ?region_name .\n"
                + "?r geo:asWKT ?region .\n"
                + "?x rasdb:hasRasterName ?raster_name .\n"
                + "?x rasdb:hasMinLongitude ?min_lon .\n"
                + "?x rasdb:hasMaxLatitude ?max_lat .\n"
                + "?x rasdb:hasSpatialResolution_lon ?x_res .\n"
                + "?x rasdb:hasSpatialResolution_lat ?y_res .\n"
                + "FILTER (CONTAINS(?region_name, 'Link√∂ping')\n)" //Vector region = Regen, Erding, Kelheim, Link√∂ping (14534), Ultimo (13791), Hofors
                + "FILTER (CONTAINS(?raster_name, 'Sweden')\n)" //Raster Dataset = Bavaria_Temperature_MODIS_1km, Surface_Temperature_Sweden, South_Tyrol_Temperature_MODIS_1km
                + "BIND (100 AS ?time\n)"
                + "BIND (rasdb:rasSpatialMaximumX(?time, ?region, ?min_lon, ?max_lat, ?x_res, ?y_res, ?raster_name) AS ?v)"
                + "}\n";

        executeAndCompareValues(query11, ImmutableList.of("\"14534\"^^xsd:integer"));
    }


    @Test
    public void maxRasterSPATIALX_II_III_Polygon() {

        String query12 = "PREFIX :\t<http://www.semanticweb.org/arkaghosh/OntoRaster/>\n"
                + "PREFIX rdfs:\t<http://www.w3.org/2000/01/rdf-schema#>\n"
                + "PREFIX geo:\t<http://www.opengis.net/ont/geosparql#>\n"
                + "PREFIX rasdb:\t<http://www.semanticweb.org/RasterDataCube/>\n"
                + "SELECT ?v {\n"
                + "?r rdfs:label ?region_name .\n"
                + "?r geo:asWKT ?region .\n"
                + "?x rasdb:hasRasterName ?raster_name .\n"
                + "?x rasdb:hasMinLongitude ?min_lon .\n"
                + "?x rasdb:hasMaxLatitude ?max_lat .\n"
                + "?x rasdb:hasSpatialResolution_lon ?x_res .\n"
                + "?x rasdb:hasSpatialResolution_lat ?y_res .\n"
                + "FILTER (CONTAINS(?region_name, 'Bayreuth')\n)" //Vector region = Erding, Kelheim,  Ultimo, Bayreuth
                + "FILTER (CONTAINS(?raster_name, 'Baveria')\n)" //Raster Dataset = Bavaria_Temperature_MODIS_1km, Surface_Temperature_Sweden, South_Tyrol_Temperature_MODIS_1km
                + "BIND (100 AS ?time\n)"
                + "BIND (rasdb:rasSpatialMaximumX(?time, ?region, ?min_lon, ?max_lat, ?x_res, ?y_res, ?raster_name) AS ?v)"
                + "} LIMIT 1 \n";

        executeAndCompareValues(query12, ImmutableList.of("\"13858\"^^xsd:integer"));
    }


    @Test
    public void maxRasterSPATIALX_IV_V_MultiPolygon() {

        String query12 = "PREFIX :\t<http://www.semanticweb.org/arkaghosh/OntoRaster/>\n"
                + "PREFIX rdfs:\t<http://www.w3.org/2000/01/rdf-schema#>\n"
                + "PREFIX geo:\t<http://www.opengis.net/ont/geosparql#>\n"
                + "PREFIX rasdb:\t<http://www.semanticweb.org/RasterDataCube/>\n"
                + "SELECT ?v {\n"
                + "?r rdfs:label ?region_name .\n"
                + "?r geo:asWKT ?region .\n"
                + "?x rasdb:hasRasterName ?raster_name .\n"
                + "?x rasdb:hasMinLongitude ?min_lon .\n"
                + "?x rasdb:hasMaxLatitude ?max_lat .\n"
                + "?x rasdb:hasSpatialResolution_lon ?x_res .\n"
                + "?x rasdb:hasSpatialResolution_lat ?y_res .\n"
                + "FILTER (CONTAINS(?region_name, 'Ume√•')\n)" //Vector region = G√∂teborg,  Ume√•,  To work with Rosenheim (13853) switch on first three mappings
                + "FILTER (CONTAINS(?raster_name, 'Sweden')\n)" //Raster Dataset = Bavaria_Temperature_MODIS_1km, Surface_Temperature_Sweden, South_Tyrol_Temperature_MODIS_1km
                + "BIND (100 AS ?time\n)"
                + "BIND (rasdb:rasSpatialMaximumX(?time, ?region, ?min_lon, ?max_lat, ?x_res, ?y_res, ?raster_name) AS ?v)"
                + "} LIMIT 1 \n";

        executeAndCompareValues(query12, ImmutableList.of("\"14392\"^^xsd:integer"));
    }





/*//    @Test
//    public void checkBBOX(){
//        String query02 =
//                "PREFIX rasdb:\t<http://www.semanticweb.org/RasterDataCube/>\n"
//                + "SELECT * {\n"
//              + "?r rdfs:label ?region_name .\n"
//                + "?r geo:asWKT ?regionBBOX .\n"
//                + "?x rasdb:hasRasterName ?raster_name .\n"
//                + "?x rasdb:hasRasterBBOX /\n"
//                + "BIND (rasdb:rasCheckBBOX(?regionBBOX, ?rasterBBOX) AS ?v)"
//                + "}\n";
//
//        executeAndCompareValues(query2, ImmutableList.of("\"array\"^^xsd:string"));
//    }*/

}
